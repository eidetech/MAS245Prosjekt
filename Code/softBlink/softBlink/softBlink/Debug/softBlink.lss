
softBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9e:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8setupPWMv>:
	
	Data direction register operations:
	DDRD - The port D data direction register: DDD6 = 1 (DDRD |= (1U << 6U);) -> Set direction of PD6 to output.
	*/
	
	TCCR0A |= (1U << COM0A1) | (1U << WGM01) | (1U << WGM00); // Configure all bits for TCCR0A
  a6:	84 b5       	in	r24, 0x24	; 36
  a8:	83 68       	ori	r24, 0x83	; 131
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1U << CS00); // Configure all bits for TCCR0B
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bd       	out	0x25, r24	; 37
	
	DDRD |= (1U << 6U); // Set PD6 pin as output
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	08 95       	ret

000000ba <_Z9outputPWMh>:
   y = 0-255 value
   dutyCycle% = x*y
*/
void outputPWM(uint8_t dutyCycle)
{
	OCR0A = dutyCycle;
  ba:	87 bd       	out	0x27, r24	; 39
  bc:	08 95       	ret

000000be <main>:
}
int main()
{
	setupPWM();
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8setupPWMv>
	while(1)
	{
		// Increase brightness of LED
		for(int i = 0;i <= 255;i++)
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	cf 3f       	cpi	r28, 0xFF	; 255
  c8:	d1 05       	cpc	r29, r1
  ca:	09 f0       	breq	.+2      	; 0xce <main+0x10>
  cc:	4c f4       	brge	.+18     	; 0xe0 <main+0x22>
		{
			outputPWM(i);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 5d 00 	call	0xba	; 0xba <_Z9outputPWMh>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x1a>
{
	setupPWM();
	while(1)
	{
		// Increase brightness of LED
		for(int i = 0;i <= 255;i++)
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	f3 cf       	rjmp	.-26     	; 0xc6 <main+0x8>
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d0 e0       	ldi	r29, 0x00	; 0
			outputPWM(i);
			_delay_loop_2(500);
		}
		
		// Decrease brightness of LED
		for(int i = 255; i >= 0; i--)
  e4:	dd 23       	and	r29, r29
  e6:	6c f3       	brlt	.-38     	; 0xc2 <main+0x4>
		{
			outputPWM(i);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 5d 00 	call	0xba	; 0xba <_Z9outputPWMh>
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x34>
			outputPWM(i);
			_delay_loop_2(500);
		}
		
		// Decrease brightness of LED
		for(int i = 255; i >= 0; i--)
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	f5 cf       	rjmp	.-22     	; 0xe4 <main+0x26>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
