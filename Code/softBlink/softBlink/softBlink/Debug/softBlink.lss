
softBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064a  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define DELAY_MIN    100

int main(void)
{
    /* set LED pin as OUTPUT */
    DDRD |= (1 << LED_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10
    int step = -1;
    uint16_t delay = DELAY_MIN;
  86:	24 e6       	ldi	r18, 0x64	; 100
  88:	30 e0       	ldi	r19, 0x00	; 0

int main(void)
{
    /* set LED pin as OUTPUT */
    DDRD |= (1 << LED_PIN);
    int step = -1;
  8a:	4f ef       	ldi	r20, 0xFF	; 255
  8c:	5f ef       	ldi	r21, 0xFF	; 255
    uint16_t delay = DELAY_MIN;
	
    while (1) 
    {
		/* changing duty cycle */
		if (delay <= DELAY_MIN || delay>=DELAY_MAX) {
  8e:	c9 01       	movw	r24, r18
  90:	85 56       	subi	r24, 0x65	; 101
  92:	91 09       	sbc	r25, r1
  94:	8b 39       	cpi	r24, 0x9B	; 155
  96:	93 41       	sbci	r25, 0x13	; 19
  98:	18 f0       	brcs	.+6      	; 0xa0 <main+0x20>
			step  = -step;
  9a:	51 95       	neg	r21
  9c:	41 95       	neg	r20
  9e:	51 09       	sbc	r21, r1
		}
		delay += step;
  a0:	24 0f       	add	r18, r20
  a2:	35 1f       	adc	r19, r21
		
		/* LED off */
		PORTD &= ~(1<<LED_PIN);
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  aa:	c9 01       	movw	r24, r18
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2c>
		_delay_loop_2(delay);
		
		/* LED on */
		PORTD |= (1<<LED_PIN);
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b b9       	out	0x0b, r24	; 11
		_delay_loop_2(DELAY_MAX - delay);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	94 e1       	ldi	r25, 0x14	; 20
  ba:	82 1b       	sub	r24, r18
  bc:	93 0b       	sbc	r25, r19
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x3e>
  c2:	e5 cf       	rjmp	.-54     	; 0x8e <main+0xe>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
